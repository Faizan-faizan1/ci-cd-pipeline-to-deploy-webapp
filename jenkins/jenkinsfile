pipeline {
    agent any

    environment {
        AWS_REGION = "up-southeast-2"
        AWS_CREDENTIALS_ID = "aws-credentials-id"
        DOCKER_CREDENTIALS_ID = "ecr-credentials-id"
        EC2_SSH_CREDENTIALS_ID = "ec2-ssh-credentials"
    }

    stages {
        stage('Initialize Terraform') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${AWS_CREDENTIALS_ID}", usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh 'terraform init'
                    }
                }
            }
        }

        stage('Apply Terraform') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${AWS_CREDENTIALS_ID}", usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh 'terraform apply -auto-approve'
                    }
                }
            }
        }

        stage('Get ECR Repository URI') {
            steps {
                script {
                    def ecrRepoUri = sh(script: 'terraform output -raw ecr_repository_uri', returnStdout: true).trim()
                    env.ECR_REPO_URI = ecrRepoUri
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${ECR_REPO_URI}:latest")
                }
            }
        }

        stage('Login to ECR') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${AWS_CREDENTIALS_ID}", usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh 'aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO_URI}'
                    }
                }
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                script {
                    docker.withRegistry("https://${ECR_REPO_URI}", "${DOCKER_CREDENTIALS_ID}") {
                        dockerImage.push("latest")
                    }
                }
            }
        }

        stage('Deploy Application') {
            steps {
                sshagent(['ec2-ssh-credentials']) {
                    sh 'ssh -o StrictHostKeyChecking=no ec2-user@${AWS_INSTANCE_PUBLIC_IP} "docker run -d -p 80:80 ${ECR_REPO_URI}:latest"'
                }
            }
        }
    }
}

